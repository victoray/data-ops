{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Option","Select","margin","horizontal","vertical","width","height","dataSet","daily","annual","weekly","monthly","App","useState","data","setData","useEffect","g","d3","append","attr","text","yScale","range","domain","d","Price","yAxisCall","ticks","call","xScale","Date","xAxisCall","line","x","y","selectAll","remove","className","title","extra","defaultValue","style","onChange","value","id","Meta","description","marginLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"khhQAUQA,EAAWC,IAAXD,OAEFE,EAAiB,IAAjBA,EAAsC,GACtCC,EAAaD,EADgB,GAE7BE,EAAWF,EAFuC,IAGlDG,EAAQ,KAAOF,EACfG,EAAS,IAAMF,EAEfG,EAAoC,CACxCC,QACAC,SACAC,SACAC,WAiGaC,MA9Ff,WAAgB,IAAD,EACWC,mBAAS,SADpB,mBACNC,EADM,KACAC,EADA,KAsEb,OAnEAC,qBAAU,WACR,IAMMC,EANMC,IACF,eACPC,OAAO,OACPC,KAAK,SAAUd,EAASF,GACxBgB,KAAK,QAASf,EAAQF,GAGtBgB,OAAO,KACPC,KAAK,SAAUd,GACfc,KAAK,QAASf,GACde,KAAK,YAJE,oBAIwBlB,EAJxB,aAIwCA,EAJxC,MAMVe,EAAEE,OAAO,KACNA,OAAO,QACPC,KAAK,KAAMd,EAAS,GACpBc,KAAK,KAAM,IACXA,KAAK,YAJR,eAKGA,KAAK,cAAe,UACpBA,KAAK,OAAQ,WACbA,KAAK,YAAa,IAClBC,KAAK,2BAERJ,EAAEE,OAAO,KACNA,OAAO,QACPC,KAAK,IAAKf,EAAQ,GAClBe,KAAK,IAAKd,EAAS,IACnBc,KAAK,cAAe,UACpBA,KAAK,OAAQ,WACbA,KAAK,YAAa,IAClBC,KAAK,QAER,IAAMC,EAASJ,MAEZK,MAAM,CAACjB,EAAQ,IACfkB,OAAO,CAAC,EAAGN,IAAOX,EAAQO,IAAO,SAAAW,GAAC,OAAIA,EAAEC,SAAS,IAC9CC,EAAYT,IAAYI,GAAQM,MAAM,GAC5CX,EAAEE,OAAO,KAAKU,KAAKF,GAEnB,IAAMG,EAASZ,MAEZK,MAAM,CAAC,EAAGlB,IACVmB,OAAON,IAAUX,EAAQO,IAAO,SAAAW,GAAC,OAAI,IAAIM,KAAKN,EAAEM,UAC7CC,EAAYd,IAAcY,GAChCb,EAAEE,OAAO,KACNC,KAAK,YADR,uBACqCd,EADrC,MAEGuB,KAAKG,GAER,IAAMC,EAAOf,MAEVgB,GAAE,SAACT,GAAD,OAAYK,EAAOL,EAAEM,SACvBI,GAAE,SAACV,GAAD,OAAYH,EAAOG,EAAEC,UAS1B,OAPAT,EAAEE,OAAO,QACNC,KAAK,QAAS,QACdA,KAAK,OAAQ,QACbA,KAAK,SAAU,WACfA,KAAK,eAAgB,GACrBA,KAAK,IAAKa,EAAK1B,EAAQO,KAEnB,WACLI,IAAU,eACPkB,UAAU,OACVC,YAEJ,CAACvB,IAGF,yBAAKwB,UAAW,OACd,kBAAC,IAAD,CACEC,MAAK,UAAKzB,EAAL,sBACL0B,MACE,kBAAC,IAAD,CACEC,aAAa,QACbC,MAAO,CAAErC,MAAO,KAChBsC,SAAU,SAAAC,GAAK,OAAI7B,EAAQ6B,KAE3B,kBAAC5C,EAAD,CAAQ4C,MAAM,SAAd,SACA,kBAAC5C,EAAD,CAAQ4C,MAAM,UAAd,UACA,kBAAC5C,EAAD,CAAQ4C,MAAM,WAAd,WACA,kBAAC5C,EAAD,CAAQ4C,MAAM,UAAd,YAIJ,yBAAKC,GAAG,eACR,kBAAC,IAAKC,KAAN,CAAWC,YAAa,mCAAoCL,MAAO,CAACM,WAAY9C,QCrGpE+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3b803f80.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport daily from \"./data/daily_prices.json\";\nimport annual from \"./data/annual_prices.json\";\nimport monthly from \"./data/monthly_prices.json\";\nimport weekly from \"./data/weekly_prices.json\";\nimport * as d3 from \"d3\";\nimport \"./App.css\";\nimport { Card } from \"antd\";\nimport { Select } from \"antd\";\n\nconst { Option } = Select;\n\nconst margin = { left: 100, right: 10, top: 10, bottom: 100 };\nconst horizontal = margin.left + margin.right;\nconst vertical = margin.top + margin.bottom;\nconst width = 1200 - horizontal;\nconst height = 600 - vertical;\n\nconst dataSet: { [key: string]: any[] } = {\n  daily,\n  annual,\n  weekly,\n  monthly\n};\n\nfunction App() {\n  const [data, setData] = useState(\"daily\");\n\n  useEffect(() => {\n    const svg = d3\n      .select(\"#price-data\")\n      .append(\"svg\")\n      .attr(\"height\", height + vertical)\n      .attr(\"width\", width + horizontal);\n\n    const g = svg\n      .append(\"g\")\n      .attr(\"height\", height)\n      .attr(\"width\", width)\n      .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n    g.append(\"g\")\n      .append(\"text\")\n      .attr(\"x\", -height / 2)\n      .attr(\"y\", -25)\n      .attr(\"transform\", `rotate(-90)`)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"fill\", \"#008dff\")\n      .attr(\"font-size\", 20)\n      .text(\"Dollars Per Million Btu\");\n\n    g.append(\"g\")\n      .append(\"text\")\n      .attr(\"x\", width / 2)\n      .attr(\"y\", height + 40)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"fill\", \"#008dff\")\n      .attr(\"font-size\", 20)\n      .text(\"Year\");\n\n    const yScale = d3\n      .scaleLinear()\n      .range([height, 0])\n      .domain([0, d3.max(dataSet[data], d => d.Price) + 3]);\n    const yAxisCall = d3.axisLeft(yScale).ticks(5);\n    g.append(\"g\").call(yAxisCall);\n\n    const xScale = d3\n      .scaleTime()\n      .range([0, width])\n      .domain(d3.extent(dataSet[data], d => new Date(d.Date)) as Date[]);\n    const xAxisCall = d3.axisBottom(xScale);\n    g.append(\"g\")\n      .attr(\"transform\", `translate(0, ${height})`)\n      .call(xAxisCall);\n\n    const line = d3\n      .line()\n      .x((d: any) => xScale(d.Date))\n      .y((d: any) => yScale(d.Price));\n\n    g.append(\"path\")\n      .attr(\"class\", \"line\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#008dff\")\n      .attr(\"stroke-width\", 3)\n      .attr(\"d\", line(dataSet[data] as any) as any);\n\n    return () => {\n      d3.select(\"#price-data\")\n        .selectAll(\"svg\")\n        .remove();\n    };\n  }, [data]);\n\n  return (\n    <div className={\"App\"}>\n      <Card\n        title={`${data} Historical Prices`}\n        extra={\n          <Select\n            defaultValue=\"daily\"\n            style={{ width: 120 }}\n            onChange={value => setData(value)}\n          >\n            <Option value=\"daily\">Daily</Option>\n            <Option value=\"weekly\">Weekly</Option>\n            <Option value=\"monthly\">Monthly</Option>\n            <Option value=\"annual\">Annual</Option>\n          </Select>\n        }\n      >\n        <div id=\"price-data\" />\n        <Card.Meta description={\"Henry Hub Natural Gas Spot Price\"} style={{marginLeft: margin.left}}/>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}